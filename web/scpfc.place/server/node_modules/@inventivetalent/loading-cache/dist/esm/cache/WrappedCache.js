import { Entry } from "./CacheBase";
import { SimpleCache } from "./SimpleCache";
/**
 * Wrapper around simple string KV getter/setter/deleter functions
 * Intended for e.g. creating a persistent cache using the browser's localStorage
 */
export class WrappedCache extends SimpleCache {
    constructor(options, getter, setter, deleter, allDeleter) {
        super(options);
        this.getter = getter;
        this.setter = setter;
        this.deleter = deleter;
        this.allDeleter = allDeleter;
    }
    getEntryIfPresent(key, recordStats = this.options.recordStats) {
        const s = super.getEntryIfPresent(key, recordStats);
        if (s) {
            return s;
        }
        const v = this.getter(JSON.stringify(key));
        if (v) {
            const parsed = Entry.fromJson(key, JSON.parse(v));
            this.putEntry(key, parsed);
            return parsed;
        }
        return undefined;
    }
    putEntry(key, entry) {
        super.putEntry(key, entry);
        this.setter(JSON.stringify(key), JSON.stringify(entry));
    }
    invalidateEntry(key) {
        this.deleter(JSON.stringify(key));
        return super.invalidateEntry(key);
    }
    invalidateAll() {
        super.invalidateAll();
        if (this.allDeleter) {
            this.allDeleter();
        }
    }
}
//# sourceMappingURL=WrappedCache.js.map