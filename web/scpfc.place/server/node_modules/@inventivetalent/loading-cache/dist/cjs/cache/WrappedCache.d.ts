import { Entry, Options } from "./CacheBase";
import { SimpleCache } from "./SimpleCache";
/**
 * Wrapper around simple string KV getter/setter/deleter functions
 * Intended for e.g. creating a persistent cache using the browser's localStorage
 */
export declare class WrappedCache<K, V> extends SimpleCache<K, V> {
    readonly getter: (key: string) => string | null;
    readonly setter: (key: string, value: string) => void;
    readonly deleter: (key: string) => void | boolean;
    readonly allDeleter?: () => void;
    constructor(options: Options, getter: (key: string) => string | null, setter: (key: string, value: string) => void, deleter: (key: string) => void | boolean, allDeleter?: () => void);
    protected getEntryIfPresent(key: K, recordStats?: boolean): Entry<K, V> | undefined;
    protected putEntry(key: K, entry: Entry<K, V>): void;
    protected invalidateEntry(key: K): boolean;
    invalidateAll(): void;
}
